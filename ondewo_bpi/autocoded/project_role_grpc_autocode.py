# Copyright 2021-2024 ONDEWO GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# [AUTO-GENERATED FILE]

from abc import ABCMeta, abstractmethod

import grpc
from google.protobuf.empty_pb2 import Empty
from ondewo.nlu import project_role_pb2
from ondewo.nlu.client import Client
from ondewo.nlu.project_role_pb2_grpc import ProjectRolesServicer
from ondewo.logging.logger import logger


class AutoProjectRolesServicer(ProjectRolesServicer):
    """
    [AUTO-GENERATED CLASS]
    generated by: grpc_auto_coder.py
    DO NOT ALTER CODE UNLESS YOU WANT TO DO IT EVERY TIME YOU GENERATE IT!

    used to relay endpoints to the functions defined in:
      >> ./ondewo-nlu-client-python/ondewo/nlu/services/project_roles.py
    any child class is expected to have a .client attribute to send the service calls to (metaclass-enforced)
    all function/endpoint calls are logged
    override functions if other functionality than a client call is needed

    [original docstring]
    Project roles

    """
    __metaclass__ = ABCMeta

    @property
    @abstractmethod
    def client(self) -> Client:
        pass

    def CreateProjectRole(self, request: project_role_pb2.CreateProjectRoleRequest, context: grpc.ServicerContext) -> project_role_pb2.ProjectRole:
        """
        [AUTO-GENERATED FUNCTION]
        Creates a project role by creating the knowledge base master

        """
        logger.info("relaying CreateProjectRole() to nlu-client...")
        response = self.client.services.project_roles.create_project_role(request=request)
        return response

    def GetProjectRole(self, request: project_role_pb2.GetProjectRoleRequest, context: grpc.ServicerContext) -> project_role_pb2.ProjectRole:
        """
        [AUTO-GENERATED FUNCTION]
        Creates a project role by getting the knowledge base master

        """
        logger.info("relaying GetProjectRole() to nlu-client...")
        response = self.client.services.project_roles.get_project_role(request=request)
        return response

    def DeleteProjectRole(self, request: project_role_pb2.DeleteProjectRoleRequest, context: grpc.ServicerContext) -> Empty:
        """
        [AUTO-GENERATED FUNCTION]
        Deletes project role

        """
        logger.info("relaying DeleteProjectRole() to nlu-client...")
        response = self.client.services.project_roles.delete_project_role(request=request)
        return response

    def UpdateProjectRole(self, request: project_role_pb2.UpdateProjectRoleRequest, context: grpc.ServicerContext) -> project_role_pb2.ProjectRole:
        """
        [AUTO-GENERATED FUNCTION]
        Updates project role

        """
        logger.info("relaying UpdateProjectRole() to nlu-client...")
        response = self.client.services.project_roles.update_project_role(request=request)
        return response

    def ListProjectRoles(self, request: project_role_pb2.ListProjectRolesRequest, context: grpc.ServicerContext) -> project_role_pb2.ListProjectRolesResponse:
        """
        [AUTO-GENERATED FUNCTION]
        List project roles

        """
        logger.info("relaying ListProjectRoles() to nlu-client...")
        response = self.client.services.project_roles.list_project_roles(request=request)
        return response

# [make flake8 shut up]
