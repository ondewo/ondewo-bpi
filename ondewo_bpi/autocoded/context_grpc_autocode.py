# Copyright 2021-2024 ONDEWO GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# [AUTO-GENERATED FILE]

from abc import ABCMeta, abstractmethod

import grpc
from google.protobuf.empty_pb2 import Empty
from ondewo.nlu import context_pb2
from ondewo.nlu.client import Client
from ondewo.nlu.context_pb2_grpc import ContextsServicer
from ondewo.logging.logger import logger


class AutoContextsServicer(ContextsServicer):
    """
    [AUTO-GENERATED CLASS]
    generated by: grpc_auto_coder.py
    DO NOT ALTER CODE UNLESS YOU WANT TO DO IT EVERY TIME YOU GENERATE IT!

    used to relay endpoints to the functions defined in:
      >> ./ondewo-nlu-client-python/ondewo/nlu/services/contexts.py
    any child class is expected to have a .client attribute to send the service calls to (metaclass-enforced)
    all function/endpoint calls are logged
    override functions if other functionality than a client call is needed

    [original docstring]
    A context represents additional information included with user input or with

    """
    __metaclass__ = ABCMeta

    @property
    @abstractmethod
    def client(self) -> Client:
        pass

    def ListContexts(self, request: context_pb2.ListContextsRequest, context: grpc.ServicerContext) -> context_pb2.ListContextsResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Returns the list of all contexts in the specified session.

        """
        logger.info("relaying ListContexts() to nlu-client...")
        response = self.client.services.contexts.list_contexts(request=request)
        return response

    def GetContext(self, request: context_pb2.GetContextRequest, context: grpc.ServicerContext) -> context_pb2.Context:
        """
        [AUTO-GENERATED FUNCTION]
        Retrieves the specified context.

        """
        logger.info("relaying GetContext() to nlu-client...")
        response = self.client.services.contexts.get_context(request=request)
        return response

    def CreateContext(self, request: context_pb2.CreateContextRequest, context: grpc.ServicerContext) -> context_pb2.Context:
        """
        [AUTO-GENERATED FUNCTION]
        Creates a context.

        """
        logger.info("relaying CreateContext() to nlu-client...")
        response = self.client.services.contexts.create_context(request=request)
        return response

    def UpdateContext(self, request: context_pb2.UpdateContextRequest, context: grpc.ServicerContext) -> context_pb2.Context:
        """
        [AUTO-GENERATED FUNCTION]
        Updates the specified context.

        """
        logger.info("relaying UpdateContext() to nlu-client...")
        response = self.client.services.contexts.update_context(request=request)
        return response

    def DeleteContext(self, request: context_pb2.DeleteContextRequest, context: grpc.ServicerContext) -> Empty:
        """
        [AUTO-GENERATED FUNCTION]
        Deletes the specified context.

        """
        logger.info("relaying DeleteContext() to nlu-client...")
        response = self.client.services.contexts.delete_context(request=request)
        return response

    def DeleteAllContexts(self, request: context_pb2.DeleteAllContextsRequest, context: grpc.ServicerContext) -> Empty:
        """
        [AUTO-GENERATED FUNCTION]
        Deletes all active contexts in the specified session.

        """
        logger.info("relaying DeleteAllContexts() to nlu-client...")
        response = self.client.services.contexts.delete_all_contexts(request=request)
        return response

# [make flake8 shut up]
