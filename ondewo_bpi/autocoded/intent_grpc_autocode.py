# Copyright 2021 ONDEWO GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# [AUTO-GENERATED FILE]

from abc import ABCMeta, abstractmethod

import grpc
from google.longrunning.operations_grpc_pb2 import Operation
from google.protobuf.empty_pb2 import Empty
from ondewo.logging.logger import logger
from ondewo.nlu import intent_pb2
from ondewo.nlu.client import Client
from ondewo.nlu.intent_pb2_grpc import IntentsServicer


class AutoIntentsServicer(IntentsServicer):
    """
    [AUTO-GENERATED CLASS]
    generated by: grpc_auto_coder.py
    DO NOT ALTER CODE UNLESS YOU WANT TO DO IT EVERY TIME YOU GENERATE IT!

    used to relay endpoints to the functions defined in:
      >> ./ondewo-nlu-client-python/ondewo/nlu/services/intents.py
    any child class is expected to have a .client attribute to send the service calls to (metaclass-enforced)
    all function/endpoint calls are logged
    override functions if other functionality than a client call is needed

    [original docstring]
    An intent represents a mapping between input from a user and an action to

    """
    __metaclass__ = ABCMeta

    @property
    @abstractmethod
    def client(self) -> Client:
        pass

    def ListIntents(self, request: intent_pb2.ListIntentsRequest, context: grpc.ServicerContext) -> intent_pb2.ListIntentsResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Returns the list of all intents in the specified agent.

        """
        logger.info("relaying ListIntents() to nlu-client...")
        response = self.client.services.intents.list_intents(request=request)
        return response

    def GetIntent(self, request: intent_pb2.GetIntentRequest, context: grpc.ServicerContext) -> intent_pb2.Intent:
        """
        [AUTO-GENERATED FUNCTION]
        Retrieves the specified intent.

        """
        logger.info("relaying GetIntent() to nlu-client...")
        response = self.client.services.intents.get_intent(request=request)
        return response

    def CreateIntent(self, request: intent_pb2.CreateIntentRequest, context: grpc.ServicerContext) -> intent_pb2.Intent:
        """
        [AUTO-GENERATED FUNCTION]
        Creates an intent in the specified agent.

        """
        logger.info("relaying CreateIntent() to nlu-client...")
        response = self.client.services.intents.create_intent(request=request)
        return response

    def UpdateIntent(self, request: intent_pb2.UpdateIntentRequest, context: grpc.ServicerContext) -> intent_pb2.Intent:
        """
        [AUTO-GENERATED FUNCTION]
        Updates the specified intent.

        """
        logger.info("relaying UpdateIntent() to nlu-client...")
        response = self.client.services.intents.update_intent(request=request)
        return response

    def DeleteIntent(self, request: intent_pb2.DeleteIntentRequest, context: grpc.ServicerContext) -> Empty:
        """
        [AUTO-GENERATED FUNCTION]
        Deletes the specified intent.

        """
        logger.info("relaying DeleteIntent() to nlu-client...")
        response = self.client.services.intents.delete_intent(request=request)
        return response

    def BatchUpdateIntents(self, request: intent_pb2.BatchUpdateIntentsRequest, context: grpc.ServicerContext) -> Operation:
        """
        [AUTO-GENERATED FUNCTION]
        Updates/Creates multiple intents in the specified agent.

        """
        logger.info("relaying BatchUpdateIntents() to nlu-client...")
        response = self.client.services.intents.batch_update_intents(request=request)
        return response

    def BatchDeleteIntents(self, request: intent_pb2.BatchDeleteIntentsRequest,
                           context: grpc.ServicerContext) -> Operation:
        """
        [AUTO-GENERATED FUNCTION]
        Deletes intents in the specified agent.

        """
        logger.info("relaying BatchDeleteIntents() to nlu-client...")
        response = self.client.services.intents.batch_delete_intents(request=request)
        return response

    def TagIntent(self, request: intent_pb2.IntentTagRequest, context: grpc.ServicerContext) -> Empty:
        """
        [AUTO-GENERATED FUNCTION]
        Missing associated documentation comment in .proto file.
        """
        logger.info("relaying TagIntent() to nlu-client...")
        response = self.client.services.intents.tag_intent(request=request)
        return response

    def DeleteIntentTag(self, request: intent_pb2.IntentTagRequest, context: grpc.ServicerContext) -> Empty:
        """
        [AUTO-GENERATED FUNCTION]
        Missing associated documentation comment in .proto file.
        """
        logger.info("relaying DeleteIntentTag() to nlu-client...")
        response = self.client.services.intents.tag_intent(request=request)
        return response

    def BatchCreateTrainingPhrases(self, request: intent_pb2.BatchCreateTrainingPhrasesRequest,
                                   context: grpc.ServicerContext) -> intent_pb2.BatchTrainingPhrasesStatusResponse:
        """
        [AUTO-GENERATED FUNCTION]
        ************************ Training Phrase RPC Endpoints ***************************

        """
        logger.info("relaying BatchCreateTrainingPhrases() to nlu-client...")
        response = self.client.services.intents.batch_create_training_phrases(request=request)
        return response

    def BatchGetTrainingPhrases(self, request: intent_pb2.BatchGetTrainingPhrasesRequest,
                                context: grpc.ServicerContext) -> intent_pb2.BatchTrainingPhrasesStatusResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Retrieve a training phrases batch of the specified names.

        """
        logger.info("relaying BatchGetTrainingPhrases() to nlu-client...")
        response = self.client.services.intents.batch_get_training_phrases(request=request)
        return response

    def BatchUpdateTrainingPhrases(self, request: intent_pb2.BatchUpdateTrainingPhrasesRequest,
                                   context: grpc.ServicerContext) -> intent_pb2.BatchTrainingPhrasesStatusResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Updates batch of training phrases

        """
        logger.info("relaying BatchUpdateTrainingPhrases() to nlu-client...")
        response = self.client.services.intents.batch_update_training_phrases(request=request)
        return response

    def BatchDeleteTrainingPhrases(self, request: intent_pb2.BatchDeleteTrainingPhrasesRequest,
                                   context: grpc.ServicerContext) -> intent_pb2.BatchDeleteTrainingPhrasesResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Delete a training phrases batch of the specified names.

        """
        logger.info("relaying BatchDeleteTrainingPhrases() to nlu-client...")
        response = self.client.services.intents.batch_delete_training_phrases(request=request)
        return response

    def BatchCreateResponseMessages(self, request: intent_pb2.BatchCreateResponseMessagesRequest,
                                    context: grpc.ServicerContext) -> intent_pb2.BatchResponseMessagesStatusResponse:
        """
        [AUTO-GENERATED FUNCTION]
        ************************ Response RPC Endpoints ***************************

        """
        logger.info("relaying BatchCreateResponseMessages() to nlu-client...")
        response = self.client.services.intents.batch_create_response_messages(request=request)
        return response

    def BatchGetResponseMessages(self, request: intent_pb2.BatchGetResponseMessagesRequest,
                                 context: grpc.ServicerContext) -> intent_pb2.BatchResponseMessagesStatusResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Retrieve a intent messages batch of the specified names.

        """
        logger.info("relaying BatchGetResponseMessages() to nlu-client...")
        response = self.client.services.intents.batch_get_response_messages(request=request)
        return response

    def BatchUpdateResponseMessages(self, request: intent_pb2.BatchUpdateResponseMessagesRequest,
                                    context: grpc.ServicerContext) -> intent_pb2.BatchResponseMessagesStatusResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Updates batch of intent messages

        """
        logger.info("relaying BatchUpdateResponseMessages() to nlu-client...")
        response = self.client.services.intents.batch_update_response_messages(request=request)
        return response

    def BatchDeleteResponseMessages(self, request: intent_pb2.BatchDeleteResponseMessagesRequest,
                                    context: grpc.ServicerContext) -> intent_pb2.BatchDeleteResponseMessagesResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Delete a intent messages batch of the specified names.

        """
        logger.info("relaying BatchDeleteResponseMessages() to nlu-client...")
        response = self.client.services.intents.batch_delete_response_messages(request=request)
        return response

    def BatchCreateParameters(self, request: intent_pb2.BatchCreateParametersRequest,
                              context: grpc.ServicerContext) -> intent_pb2.BatchParametersStatusResponse:
        """
        [AUTO-GENERATED FUNCTION]
        ************************ Parameter RPC Endpoints ***************************

        """
        logger.info("relaying BatchCreateParameters() to nlu-client...")
        response = self.client.services.intents.batch_create_parameters(request=request)
        return response

    def BatchGetParameters(self, request: intent_pb2.BatchGetParametersRequest,
                           context: grpc.ServicerContext) -> intent_pb2.BatchParametersStatusResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Retrieve a intent messages batch of the specified names.

        """
        logger.info("relaying BatchGetParameters() to nlu-client...")
        response = self.client.services.intents.batch_get_parameters(request=request)
        return response

    def BatchUpdateParameters(self, request: intent_pb2.BatchUpdateParametersRequest,
                              context: grpc.ServicerContext) -> intent_pb2.BatchParametersStatusResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Updates batch of intent messages

        """
        logger.info("relaying BatchUpdateParameters() to nlu-client...")
        response = self.client.services.intents.batch_update_parameters(request=request)
        return response

    def BatchDeleteParameters(self, request: intent_pb2.BatchDeleteParametersRequest,
                              context: grpc.ServicerContext) -> intent_pb2.BatchDeleteParametersResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Delete a intent messages batch of the specified names.

        """
        logger.info("relaying BatchDeleteParameters() to nlu-client...")
        response = self.client.services.intents.batch_delete_parameters(request=request)
        return response

# [make flake8 shut up]
