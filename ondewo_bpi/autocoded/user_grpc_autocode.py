# Copyright 2021-2024 ONDEWO GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# [AUTO-GENERATED FILE]

from abc import ABCMeta, abstractmethod

import grpc
from google.protobuf.empty_pb2 import Empty
from ondewo.nlu import common_pb2, user_pb2
from ondewo.nlu.client import Client
from ondewo.nlu.user_pb2_grpc import UsersServicer
from ondewo.logging.logger import logger


class AutoUsersServicer(UsersServicer):
    """
    [AUTO-GENERATED CLASS]
    generated by: grpc_auto_coder.py
    DO NOT ALTER CODE UNLESS YOU WANT TO DO IT EVERY TIME YOU GENERATE IT!

    used to relay endpoints to the functions defined in:
      >> ./ondewo-nlu-client-python/ondewo/nlu/services/users.py
    any child class is expected to have a .client attribute to send the service calls to (metaclass-enforced)
    all function/endpoint calls are logged
    override functions if other functionality than a client call is needed

    [original docstring]
    gRPC service for managing users and server roles.

    """
    __metaclass__ = ABCMeta

    @property
    @abstractmethod
    def client(self) -> Client:
        pass

    def CreateUser(self, request: user_pb2.CreateUserRequest, context: grpc.ServicerContext) -> user_pb2.User:
        """
        [AUTO-GENERATED FUNCTION]
        Creates a user.

        """
        logger.info("relaying CreateUser() to nlu-client...")
        response = self.client.services.users.create_user(request=request)
        return response

    def GetUser(self, request: user_pb2.GetUserRequest, context: grpc.ServicerContext) -> user_pb2.User:
        """
        [AUTO-GENERATED FUNCTION]
        Retrieves a user by identifier.

        """
        logger.info("relaying GetUser() to nlu-client...")
        response = self.client.services.users.get_user(request=request)
        return response

    def GetUserInfo(self, request: user_pb2.GetUserRequest, context: grpc.ServicerContext) -> user_pb2.UserInfo:
        """
        [AUTO-GENERATED FUNCTION]
        Retrieves user information by identifier.

        """
        logger.info("relaying GetUserInfo() to nlu-client...")
        response = self.client.services.users.get_user_info(request=request)
        return response

    def DeleteUser(self, request: user_pb2.GetUserRequest, context: grpc.ServicerContext) -> Empty:
        """
        [AUTO-GENERATED FUNCTION]
        Deletes a user by identifier.

        """
        logger.info("relaying DeleteUser() to nlu-client...")
        response = self.client.services.users.delete_user(request=request)
        return response

    def UpdateUser(self, request: user_pb2.UpdateUserRequest, context: grpc.ServicerContext) -> user_pb2.User:
        """
        [AUTO-GENERATED FUNCTION]
        Updates a user.

        """
        logger.info("relaying UpdateUser() to nlu-client...")
        response = self.client.services.users.update_user(request=request)
        return response

    def ListUsers(self, request: user_pb2.ListUsersRequest, context: grpc.ServicerContext) -> user_pb2.ListUsersResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Lists users.

        """
        logger.info("relaying ListUsers() to nlu-client...")
        response = self.client.services.users.list_users(request=request)
        return response

    def ListUserInfos(self, request: user_pb2.ListUsersRequest, context: grpc.ServicerContext) -> user_pb2.ListUserInfosResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Lists user information.

        """
        logger.info("relaying ListUserInfos() to nlu-client...")
        response = self.client.services.users.list_user_infos(request=request)
        return response

    def CreateServerRole(self, request: user_pb2.CreateServerRoleRequest, context: grpc.ServicerContext) -> user_pb2.ServerRole:
        """
        [AUTO-GENERATED FUNCTION]
        Creates a server role.

        """
        logger.info("relaying CreateServerRole() to nlu-client...")
        response = self.client.services.users.create_server_role(request=request)
        return response

    def GetServerRole(self, request: user_pb2.GetServerRoleRequest, context: grpc.ServicerContext) -> user_pb2.ServerRole:
        """
        [AUTO-GENERATED FUNCTION]
        Retrieves a server role by ID.

        """
        logger.info("relaying GetServerRole() to nlu-client...")
        response = self.client.services.users.get_server_role(request=request)
        return response

    def DeleteServerRole(self, request: user_pb2.DeleteServerRoleRequest, context: grpc.ServicerContext) -> Empty:
        """
        [AUTO-GENERATED FUNCTION]
        Deletes a server role by ID.

        """
        logger.info("relaying DeleteServerRole() to nlu-client...")
        response = self.client.services.users.delete_server_role(request=request)
        return response

    def UpdateServerRole(self, request: user_pb2.UpdateServerRoleRequest, context: grpc.ServicerContext) -> user_pb2.ServerRole:
        """
        [AUTO-GENERATED FUNCTION]
        Updates a server role.

        """
        logger.info("relaying UpdateServerRole() to nlu-client...")
        response = self.client.services.users.update_server_role(request=request)
        return response

    def ListServerRoles(self, request: user_pb2.ListServerRolesRequest, context: grpc.ServicerContext) -> user_pb2.ListServerRolesResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Lists server roles.

        """
        logger.info("relaying ListServerRoles() to nlu-client...")
        response = self.client.services.users.list_server_roles(request=request)
        return response

    def ListServerPermissions(self, request: user_pb2.ListServerPermissionsRequest, context: grpc.ServicerContext) -> user_pb2.ListServerPermissionsResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Lists server permissions.

        """
        logger.info("relaying ListServerPermissions() to nlu-client...")
        response = self.client.services.users.list_server_permissions(request=request)
        return response

    def Login(self, request: user_pb2.LoginRequest, context: grpc.ServicerContext) -> user_pb2.LoginResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Requests login.

        """
        logger.info("relaying Login() to nlu-client...")
        response = self.client.services.users.login(request=request)
        return response

    def CheckLogin(self, request: Empty, context: grpc.ServicerContext) -> Empty:
        """
        [AUTO-GENERATED FUNCTION]
        Checks login.

        """
        logger.info("relaying CheckLogin() to nlu-client...")
        response = self.client.services.users.check_login()
        return response

    def ListNotifications(self, request: common_pb2.ListNotificationsRequest, context: grpc.ServicerContext) -> common_pb2.ListNotificationsResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Lists notifications based on specified filters.

        """
        logger.info("relaying ListNotifications() to nlu-client...")
        response = self.client.services.users.list_notifications(request=request)
        return response

    def SetNotificationsFlaggedStatus(self, request: common_pb2.SetNotificationsFlaggedStatusRequest, context: grpc.ServicerContext) -> common_pb2.ListNotificationsResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Sets the flagged status for multiple notifications.

        """
        logger.info("relaying SetNotificationsFlaggedStatus() to nlu-client...")
        response = self.client.services.users.set_notifications_flagged_status(request=request)
        return response

    def SetNotificationsReadStatus(self, request: common_pb2.SetNotificationsReadStatusRequest, context: grpc.ServicerContext) -> common_pb2.ListNotificationsResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Sets the read status for multiple notifications.

        """
        logger.info("relaying SetNotificationsReadStatus() to nlu-client...")
        response = self.client.services.users.set_notifications_read_status(request=request)
        return response

    def GetUserPreferences(self, request: user_pb2.GetUserPreferencesRequest, context: grpc.ServicerContext) -> user_pb2.GetUserPreferencesResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Retrieves user preferences based on the provided request.

        """
        logger.info("relaying GetUserPreferences() to nlu-client...")
        response = self.client.services.users.get_user_preferences(request=request)
        return response

    def SetUserPreferences(self, request: user_pb2.SetUserPreferencesRequest, context: grpc.ServicerContext) -> user_pb2.SetUserPreferencesResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Sets or updates user preferences based on the provided request.

        """
        logger.info("relaying SetUserPreferences() to nlu-client...")
        response = self.client.services.users.set_user_preferences(request=request)
        return response

    def DeleteUserPreferences(self, request: user_pb2.DeleteUserPreferencesRequest, context: grpc.ServicerContext) -> user_pb2.DeleteUserPreferencesResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Deletes specific user preferences based on the provided request.

        """
        logger.info("relaying DeleteUserPreferences() to nlu-client...")
        response = self.client.services.users.delete_user_preferences(request=request)
        return response

    def DeleteAllUserPreferences(self, request: user_pb2.DeleteAllUserPreferencesRequest, context: grpc.ServicerContext) -> user_pb2.DeleteUserPreferencesResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Deletes all user preferences for a specific user, optionally filtered by a substring.

        """
        logger.info("relaying DeleteAllUserPreferences() to nlu-client...")
        response = self.client.services.users.delete_all_user_preferences(request=request)
        return response

# [make flake8 shut up]
