# Copyright 2021-2024 ONDEWO GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# [AUTO-GENERATED FILE]

from abc import ABCMeta, abstractmethod

import grpc
from ondewo.nlu import aiservices_pb2
from ondewo.nlu.client import Client
from ondewo.nlu.aiservices_pb2_grpc import AiServicesServicer
from ondewo.logging.logger import logger


class AutoAiServicesServicer(AiServicesServicer):
    """
    [AUTO-GENERATED CLASS]
    generated by: grpc_auto_coder.py
    DO NOT ALTER CODE UNLESS YOU WANT TO DO IT EVERY TIME YOU GENERATE IT!

    used to relay endpoints to the functions defined in:
      >> ./ondewo-nlu-client-python/ondewo/nlu/services/aiservices.py
    any child class is expected to have a .client attribute to send the service calls to (metaclass-enforced)
    all function/endpoint calls are logged
    override functions if other functionality than a client call is needed

    [original docstring]
    The Central class defining the ondewo ai services

    """
    __metaclass__ = ABCMeta

    @property
    @abstractmethod
    def client(self) -> Client:
        pass

    def ExtractEntities(self, request: aiservices_pb2.ExtractEntitiesRequest, context: grpc.ServicerContext) -> aiservices_pb2.ExtractEntitiesResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Processes a natural language query and returns detected entities

        """
        logger.info("relaying ExtractEntities() to nlu-client...")
        response = self.client.services.aiservices.extract_entities(request=request)
        return response

    def GenerateUserSays(self, request: aiservices_pb2.GenerateUserSaysRequest, context: grpc.ServicerContext) -> aiservices_pb2.GenerateUserSaysResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Generates a list of training phrases

        """
        logger.info("relaying GenerateUserSays() to nlu-client...")
        response = self.client.services.aiservices.generate_user_says(request=request)
        return response

    def GenerateResponses(self, request: aiservices_pb2.GenerateResponsesRequest, context: grpc.ServicerContext) -> aiservices_pb2.GenerateResponsesResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Generate responses from all intents using synonyms

        """
        logger.info("relaying GenerateResponses() to nlu-client...")
        response = self.client.services.aiservices.generate_responses(request=request)
        return response

    def GetAlternativeSentences(self, request: aiservices_pb2.GetAlternativeSentencesRequest, context: grpc.ServicerContext) -> aiservices_pb2.GetAlternativeSentencesResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Generates alternative phrase based on original phrase

        """
        logger.info("relaying GetAlternativeSentences() to nlu-client...")
        response = self.client.services.aiservices.get_alternative_sentences(request=request)
        return response

    def GetAlternativeTrainingPhrases(self, request: aiservices_pb2.GetAlternativeTrainingPhrasesRequest, context: grpc.ServicerContext) -> aiservices_pb2.GetAlternativeTrainingPhrasesResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Generates alternative training phrase based on original training phrase

        """
        logger.info("relaying GetAlternativeTrainingPhrases() to nlu-client...")
        response = self.client.services.aiservices.get_alternative_training_phrases(request=request)
        return response

    def GetSynonyms(self, request: aiservices_pb2.GetSynonymsRequest, context: grpc.ServicerContext) -> aiservices_pb2.GetSynonymsResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Generates synonyms for a certain word

        """
        logger.info("relaying GetSynonyms() to nlu-client...")
        response = self.client.services.aiservices.get_synonyms(request=request)
        return response

    def ClassifyIntents(self, request: aiservices_pb2.ClassifyIntentsRequest, context: grpc.ServicerContext) -> aiservices_pb2.ClassifyIntentsResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Preprocess text and detects intents in a sentence

        """
        logger.info("relaying ClassifyIntents() to nlu-client...")
        response = self.client.services.aiservices.classify_intents(request=request)
        return response

    def ExtractEntitiesFuzzy(self, request: aiservices_pb2.ExtractEntitiesFuzzyRequest, context: grpc.ServicerContext) -> aiservices_pb2.ExtractEntitiesResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Processes a natural language query and returns detected entities

        """
        logger.info("relaying ExtractEntitiesFuzzy() to nlu-client...")
        response = self.client.services.aiservices.extract_entities_fuzzy(request=request)
        return response

# [make flake8 shut up]
