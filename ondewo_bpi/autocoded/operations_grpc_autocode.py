# Copyright 2021-2024 ONDEWO GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# [AUTO-GENERATED FILE]

from abc import ABCMeta, abstractmethod

import grpc
from google.longrunning.operations_grpc_pb2 import Operation
from google.protobuf.empty_pb2 import Empty
from ondewo.nlu import operations_pb2
from ondewo.nlu.client import Client
from ondewo.nlu.operations_pb2_grpc import OperationsServicer
from ondewo.logging.logger import logger


class AutoOperationsServicer(OperationsServicer):
    """
    [AUTO-GENERATED CLASS]
    generated by: grpc_auto_coder.py
    DO NOT ALTER CODE UNLESS YOU WANT TO DO IT EVERY TIME YOU GENERATE IT!

    used to relay endpoints to the functions defined in:
      >> ./ondewo-nlu-client-python/ondewo/nlu/services/operations.py
    any child class is expected to have a .client attribute to send the service calls to (metaclass-enforced)
    all function/endpoint calls are logged
    override functions if other functionality than a client call is needed

    [original docstring]
    Manages long-running operations with an API service.

    """
    __metaclass__ = ABCMeta

    @property
    @abstractmethod
    def client(self) -> Client:
        pass

    def ListOperations(self, request: operations_pb2.ListOperationsRequest, context: grpc.ServicerContext) -> Operation:
        """
        [AUTO-GENERATED FUNCTION]
        Lists operations that match the specified filter in the request. If the

        """
        logger.info("relaying ListOperations() to nlu-client...")
        response = self.client.services.operations.list_operations(request=request)
        return response

    def GetOperation(self, request: operations_pb2.GetOperationRequest, context: grpc.ServicerContext) -> Operation:
        """
        [AUTO-GENERATED FUNCTION]
        Gets the latest state of a long-running operation.  Clients can use this

        """
        logger.info("relaying GetOperation() to nlu-client...")
        response = self.client.services.operations.get_operation(request=request)
        return response

    def DeleteOperation(self, request: operations_pb2.DeleteOperationRequest, context: grpc.ServicerContext) -> Empty:
        """
        [AUTO-GENERATED FUNCTION]
        Deletes a long-running operation. This method indicates that the client is

        """
        logger.info("relaying DeleteOperation() to nlu-client...")
        response = self.client.services.operations.delete_operation(request=request)
        return response

    def CancelOperation(self, request: operations_pb2.CancelOperationRequest, context: grpc.ServicerContext) -> Empty:
        """
        [AUTO-GENERATED FUNCTION]
        Starts asynchronous cancellation on a long-running operation.  The server

        """
        logger.info("relaying CancelOperation() to nlu-client...")
        response = self.client.services.operations.cancel_operation(request=request)
        return response

# [make flake8 shut up]
