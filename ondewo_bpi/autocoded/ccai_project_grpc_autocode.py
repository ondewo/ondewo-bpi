# Copyright 2021-2024 ONDEWO GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# [AUTO-GENERATED FILE]

from abc import ABCMeta, abstractmethod

import grpc
from ondewo.nlu import ccai_project_pb2
from ondewo.nlu.client import Client
from ondewo.nlu.ccai_project_pb2_grpc import CcaiProjectsServicer
from ondewo.logging.logger import logger


class AutoCcaiProjectsServicer(CcaiProjectsServicer):
    """
    [AUTO-GENERATED CLASS]
    generated by: grpc_auto_coder.py
    DO NOT ALTER CODE UNLESS YOU WANT TO DO IT EVERY TIME YOU GENERATE IT!

    used to relay endpoints to the functions defined in:
      >> ./ondewo-nlu-client-python/ondewo/nlu/services/ccai_projects.py
    any child class is expected to have a .client attribute to send the service calls to (metaclass-enforced)
    all function/endpoint calls are logged
    override functions if other functionality than a client call is needed

    [original docstring]
    Service to manage Call Center AI (CCAI) Projects.

    """
    __metaclass__ = ABCMeta

    @property
    @abstractmethod
    def client(self) -> Client:
        pass

    def GetCcaiProject(self, request: ccai_project_pb2.GetCcaiProjectRequest, context: grpc.ServicerContext) -> ccai_project_pb2.CcaiProject:
        """
        [AUTO-GENERATED FUNCTION]
        Retrieves information about a specific CCAI project.

        """
        logger.info("relaying GetCcaiProject() to nlu-client...")
        response = self.client.services.ccai_projects.get_ccai_project(request=request)
        return response

    def CreateCcaiProject(self, request: ccai_project_pb2.CreateCcaiProjectRequest, context: grpc.ServicerContext) -> ccai_project_pb2.CreateCcaiProjectResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Creates a new CCAI project based on the provided request.

        """
        logger.info("relaying CreateCcaiProject() to nlu-client...")
        response = self.client.services.ccai_projects.create_ccai_project(request=request)
        return response

    def DeleteCcaiProject(self, request: ccai_project_pb2.DeleteCcaiProjectRequest, context: grpc.ServicerContext) -> ccai_project_pb2.DeleteCcaiProjectResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Deletes a CCAI project identified by the provided request.

        """
        logger.info("relaying DeleteCcaiProject() to nlu-client...")
        response = self.client.services.ccai_projects.delete_ccai_project(request=request)
        return response

    def ListCcaiProjects(self, request: ccai_project_pb2.ListCcaiProjectsRequest, context: grpc.ServicerContext) -> ccai_project_pb2.ListCcaiProjectsResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Lists all CCAI projects based on the provided request.

        """
        logger.info("relaying ListCcaiProjects() to nlu-client...")
        response = self.client.services.ccai_projects.list_ccai_projects(request=request)
        return response

    def UpdateCcaiProject(self, request: ccai_project_pb2.UpdateCcaiProjectRequest, context: grpc.ServicerContext) -> ccai_project_pb2.UpdateCcaiProjectResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Updates the information of an existing CCAI project.

        """
        logger.info("relaying UpdateCcaiProject() to nlu-client...")
        response = self.client.services.ccai_projects.update_ccai_project(request=request)
        return response

# [make flake8 shut up]
