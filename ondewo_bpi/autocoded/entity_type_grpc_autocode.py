# Copyright 2021-2024 ONDEWO GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# [AUTO-GENERATED FILE]

from abc import ABCMeta, abstractmethod

import grpc
from google.longrunning.operations_grpc_pb2 import Operation
from google.protobuf.empty_pb2 import Empty
from ondewo.nlu import entity_type_pb2
from ondewo.nlu.client import Client
from ondewo.nlu.entity_type_pb2_grpc import EntityTypesServicer
from ondewo.logging.logger import logger


class AutoEntityTypesServicer(EntityTypesServicer):
    """
    [AUTO-GENERATED CLASS]
    generated by: grpc_auto_coder.py
    DO NOT ALTER CODE UNLESS YOU WANT TO DO IT EVERY TIME YOU GENERATE IT!

    used to relay endpoints to the functions defined in:
      >> ./ondewo-nlu-client-python/ondewo/nlu/services/entity_types.py
    any child class is expected to have a .client attribute to send the service calls to (metaclass-enforced)
    all function/endpoint calls are logged
    override functions if other functionality than a client call is needed

    [original docstring]
    Entities are extracted from user input and represent parameters that are

    """
    __metaclass__ = ABCMeta

    @property
    @abstractmethod
    def client(self) -> Client:
        pass

    def ListEntityTypes(self, request: entity_type_pb2.ListEntityTypesRequest, context: grpc.ServicerContext) -> entity_type_pb2.ListEntityTypesResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Returns the list of all entity types in the specified agent.

        """
        logger.info("relaying ListEntityTypes() to nlu-client...")
        response = self.client.services.entity_types.list_entity_types(request=request)
        return response

    def GetEntityType(self, request: entity_type_pb2.GetEntityTypeRequest, context: grpc.ServicerContext) -> entity_type_pb2.EntityType:
        """
        [AUTO-GENERATED FUNCTION]
        Retrieves the specified entity type.

        """
        logger.info("relaying GetEntityType() to nlu-client...")
        response = self.client.services.entity_types.get_entity_type(request=request)
        return response

    def CreateEntityType(self, request: entity_type_pb2.CreateEntityTypeRequest, context: grpc.ServicerContext) -> entity_type_pb2.EntityType:
        """
        [AUTO-GENERATED FUNCTION]
        Creates an entity type in the specified agent.

        """
        logger.info("relaying CreateEntityType() to nlu-client...")
        response = self.client.services.entity_types.create_entity_type(request=request)
        return response

    def UpdateEntityType(self, request: entity_type_pb2.UpdateEntityTypeRequest, context: grpc.ServicerContext) -> entity_type_pb2.EntityType:
        """
        [AUTO-GENERATED FUNCTION]
        Updates the specified entity type.

        """
        logger.info("relaying UpdateEntityType() to nlu-client...")
        response = self.client.services.entity_types.update_entity_type(request=request)
        return response

    def DeleteEntityType(self, request: entity_type_pb2.DeleteEntityTypeRequest, context: grpc.ServicerContext) -> Empty:
        """
        [AUTO-GENERATED FUNCTION]
        Deletes the specified entity type.

        """
        logger.info("relaying DeleteEntityType() to nlu-client...")
        response = self.client.services.entity_types.delete_entity_type(request=request)
        return response

    def BatchUpdateEntityTypes(self, request: entity_type_pb2.BatchUpdateEntityTypesRequest, context: grpc.ServicerContext) -> Operation:
        """
        [AUTO-GENERATED FUNCTION]
        Updates/Creates multiple entity types in the specified agent.

        """
        logger.info("relaying BatchUpdateEntityTypes() to nlu-client...")
        response = self.client.services.entity_types.batch_update_entity_types(request=request)
        return response

    def BatchDeleteEntityTypes(self, request: entity_type_pb2.BatchDeleteEntityTypesRequest, context: grpc.ServicerContext) -> Operation:
        """
        [AUTO-GENERATED FUNCTION]
        Deletes entity types in the specified agent.

        """
        logger.info("relaying BatchDeleteEntityTypes() to nlu-client...")
        response = self.client.services.entity_types.batch_delete_entity_types(request=request)
        return response

    def GetEntity(self, request: entity_type_pb2.GetEntityRequest, context: grpc.ServicerContext) -> entity_type_pb2.EntityType.Entity:
        """
        [AUTO-GENERATED FUNCTION]
        Retrieves the specified entity .

        """
        logger.info("relaying GetEntity() to nlu-client...")
        response = self.client.services.entity_types.get_entity(request=request)
        return response

    def CreateEntity(self, request: entity_type_pb2.CreateEntityRequest, context: grpc.ServicerContext) -> entity_type_pb2.EntityType.Entity:
        """
        [AUTO-GENERATED FUNCTION]
        Creates an entity  in the specified agent.

        """
        logger.info("relaying CreateEntity() to nlu-client...")
        response = self.client.services.entity_types.create_entity(request=request)
        return response

    def UpdateEntity(self, request: entity_type_pb2.UpdateEntityRequest, context: grpc.ServicerContext) -> entity_type_pb2.EntityType.Entity:
        """
        [AUTO-GENERATED FUNCTION]
        Updates the specified entity .

        """
        logger.info("relaying UpdateEntity() to nlu-client...")
        response = self.client.services.entity_types.update_entity(request=request)
        return response

    def DeleteEntity(self, request: entity_type_pb2.DeleteEntityRequest, context: grpc.ServicerContext) -> entity_type_pb2.DeleteEntityStatus:
        """
        [AUTO-GENERATED FUNCTION]
        Deletes the specified entity .

        """
        logger.info("relaying DeleteEntity() to nlu-client...")
        response = self.client.services.entity_types.delete_entity(request=request)
        return response

    def BatchCreateEntities(self, request: entity_type_pb2.BatchCreateEntitiesRequest, context: grpc.ServicerContext) -> entity_type_pb2.BatchEntitiesResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Creates an entity value in an entity type.

        """
        logger.info("relaying BatchCreateEntities() to nlu-client...")
        response = self.client.services.entity_types.batch_create_entities(request=request)
        return response

    def BatchUpdateEntities(self, request: entity_type_pb2.BatchUpdateEntitiesRequest, context: grpc.ServicerContext) -> entity_type_pb2.BatchEntitiesResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Updates a specific entity value.

        """
        logger.info("relaying BatchUpdateEntities() to nlu-client...")
        response = self.client.services.entity_types.batch_update_entities(request=request)
        return response

    def BatchGetEntities(self, request: entity_type_pb2.BatchGetEntitiesRequest, context: grpc.ServicerContext) -> entity_type_pb2.BatchEntitiesResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Gets a specific entity value.

        """
        logger.info("relaying BatchGetEntities() to nlu-client...")
        response = self.client.services.entity_types.batch_get_entities(request=request)
        return response

    def BatchDeleteEntities(self, request: entity_type_pb2.BatchDeleteEntitiesRequest, context: grpc.ServicerContext) -> entity_type_pb2.BatchDeleteEntitiesResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Deletes the specified entity value.

        """
        logger.info("relaying BatchDeleteEntities() to nlu-client...")
        response = self.client.services.entity_types.batch_delete_entities(request=request)
        return response

    def ListEntities(self, request: entity_type_pb2.ListEntitiesRequest, context: grpc.ServicerContext) -> entity_type_pb2.ListEntitiesResponse:
        """
        [AUTO-GENERATED FUNCTION]
        List entities of an entity type

        """
        logger.info("relaying ListEntities() to nlu-client...")
        response = self.client.services.entity_types.list_entities(request=request)
        return response

# [make flake8 shut up]
