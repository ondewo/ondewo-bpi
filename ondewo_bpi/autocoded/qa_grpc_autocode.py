# Copyright 2021-2024 ONDEWO GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# [AUTO-GENERATED FILE]

from abc import ABCMeta, abstractmethod

import grpc
from google.protobuf.empty_pb2 import Empty
from ondewo.qa import qa_pb2
from ondewo.qa.client import Client
from ondewo.qa.qa_pb2_grpc import QAServicer
from ondewo.logging.logger import logger


class AutoQAServicer(QAServicer):
    """
    [AUTO-GENERATED CLASS]
    generated by: grpc_auto_coder.py
    DO NOT ALTER CODE UNLESS YOU WANT TO DO IT EVERY TIME YOU GENERATE IT!

    used to relay endpoints to the functions defined in:
      >> ./ondewo-nlu-client-python/ondewo/qa/services/qa.py
    any child class is expected to have a .client attribute to send the service calls to (metaclass-enforced)
    all function/endpoint calls are logged
    override functions if other functionality than a client call is needed

    [original docstring]
    gRPC service for QA functionalities.

    """
    __metaclass__ = ABCMeta

    @property
    @abstractmethod
    def qa_client(self) -> Client:
        pass

    def GetAnswer(self, request: qa_pb2.GetAnswerRequest, context: grpc.ServicerContext) -> qa_pb2.GetAnswerResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Retrieves an answer based on the provided request.

        """
        logger.info("relaying GetAnswer() to nlu-client...")
        response = self.qa_client.services.qa.get_answer(request=request)
        return response

    def RunScraper(self, request: Empty, context: grpc.ServicerContext) -> qa_pb2.RunScraperResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Runs a web scraper job for specified project IDs.

        """
        logger.info("relaying RunScraper() to nlu-client...")
        response = self.qa_client.services.qa.run_scraper()
        return response

    def UpdateDatabase(self, request: Empty, context: grpc.ServicerContext) -> qa_pb2.UpdateDatabaseResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Updates the database for specified project IDs.

        """
        logger.info("relaying UpdateDatabase() to nlu-client...")
        response = self.qa_client.services.qa.update_database()
        return response

    def RunTraining(self, request: Empty, context: grpc.ServicerContext) -> qa_pb2.RunTrainingResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Runs a training job for the QA system.

        """
        logger.info("relaying RunTraining() to nlu-client...")
        response = self.qa_client.services.qa.run_training()
        return response

    def GetServerState(self, request: Empty, context: grpc.ServicerContext) -> qa_pb2.GetServerStateResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Retrieves the server state for QA.

        """
        logger.info("relaying GetServerState() to nlu-client...")
        response = self.qa_client.services.qa.get_server_state()
        return response

    def ListProjectIds(self, request: Empty, context: grpc.ServicerContext) -> qa_pb2.ListProjectIdsResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Lists project IDs associated with QA.

        """
        logger.info("relaying ListProjectIds() to nlu-client...")
        response = self.qa_client.services.qa.list_project_ids()
        return response

    def GetProjectConfig(self, request: Empty, context: grpc.ServicerContext) -> qa_pb2.GetProjectConfigResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Retrieves the configuration of a specific project.

        """
        logger.info("relaying GetProjectConfig() to nlu-client...")
        response = self.qa_client.services.qa.get_project_config()
        return response

# [make flake8 shut up]
