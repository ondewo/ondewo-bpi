# Copyright 2021-2024 ONDEWO GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# [AUTO-GENERATED FILE]

from abc import ABCMeta, abstractmethod

import grpc
from ondewo.nlu import utility_pb2
from ondewo.nlu.client import Client
from ondewo.nlu.utility_pb2_grpc import UtilitiesServicer
from ondewo.logging.logger import logger


class AutoUtilitiesServicer(UtilitiesServicer):
    """
    [AUTO-GENERATED CLASS]
    generated by: grpc_auto_coder.py
    DO NOT ALTER CODE UNLESS YOU WANT TO DO IT EVERY TIME YOU GENERATE IT!

    used to relay endpoints to the functions defined in:
      >> ./ondewo-nlu-client-python/ondewo/nlu/services/utilities.py
    any child class is expected to have a .client attribute to send the service calls to (metaclass-enforced)
    all function/endpoint calls are logged
    override functions if other functionality than a client call is needed

    [original docstring]
    This is collection of utility endpoints, intended to language-independent operations,

    """
    __metaclass__ = ABCMeta

    @property
    @abstractmethod
    def client(self) -> Client:
        pass

    def ValidateRegex(self, request: utility_pb2.ValidateRegexRequest, context: grpc.ServicerContext) -> utility_pb2.ValidateRegexResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Validates the validity of python regexes

        """
        logger.info("relaying ValidateRegex() to nlu-client...")
        response = self.client.services.utilities.validate_regex(request=request)
        return response

    def ValidateEmbeddedRegex(self, request: utility_pb2.ValidateEmbeddedRegexRequest, context: grpc.ServicerContext) -> utility_pb2.ValidateEmbeddedRegexResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Validate that entity types with group references have synonyms with

        """
        logger.info("relaying ValidateEmbeddedRegex() to nlu-client...")
        response = self.client.services.utilities.validate_embedded_regex(request=request)
        return response

    def CleanAllIntents(self, request: utility_pb2.CleanAllIntentsRequest, context: grpc.ServicerContext) -> utility_pb2.CleanAllIntentsResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Cleans all intent training phrases and entity annotations of parent

        """
        logger.info("relaying CleanAllIntents() to nlu-client...")
        response = self.client.services.utilities.clean_all_intents(request=request)
        return response

    def CleanIntent(self, request: utility_pb2.CleanIntentRequest, context: grpc.ServicerContext) -> utility_pb2.CleanIntentResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Cleans single intent training phrases and entity annotations

        """
        logger.info("relaying CleanIntent() to nlu-client...")
        response = self.client.services.utilities.clean_intent(request=request)
        return response

    def CleanAllEntityTypes(self, request: utility_pb2.CleanAllEntityTypesRequest, context: grpc.ServicerContext) -> utility_pb2.CleanAllEntityTypesResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Cleans all entity types of parent

        """
        logger.info("relaying CleanAllEntityTypes() to nlu-client...")
        response = self.client.services.utilities.clean_all_entity_types(request=request)
        return response

    def CleanEntityType(self, request: utility_pb2.CleanEntityTypeRequest, context: grpc.ServicerContext) -> utility_pb2.CleanEntityTypeResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Cleans entity type

        """
        logger.info("relaying CleanEntityType() to nlu-client...")
        response = self.client.services.utilities.clean_entity_type(request=request)
        return response

    def AddTrainingPhrases(self, request: utility_pb2.AddTrainingPhrasesRequest, context: grpc.ServicerContext) -> utility_pb2.AddTrainingPhrasesResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Creates new training phrases corresponding to intent specified by its intent display name

        """
        logger.info("relaying AddTrainingPhrases() to nlu-client...")
        response = self.client.services.utilities.add_training_phrases(request=request)
        return response

    def AddTrainingPhrasesFromCSV(self, request: utility_pb2.AddTrainingPhrasesFromCSVRequest, context: grpc.ServicerContext) -> utility_pb2.AddTrainingPhrasesResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Creates new training phrases corresponding to intent specified by its intent display name from csv file

        """
        logger.info("relaying AddTrainingPhrasesFromCSV() to nlu-client...")
        response = self.client.services.utilities.add_training_phrases_from_csv(request=request)
        return response

# [make flake8 shut up]
